#edit-mode: -*- python -*-
#coding:gbk

#注意：在此目录下你无法comake2 -UB，comake2会抱怨baidu-rpc是本目录的父节点，
#如果你要运行本项目，得先在baidu-rpc目录下comake2 -UB后回到本目录comake2 -P。
#你自己的项目不会有这个问题（因为不会是baidu-rpc的子目录）

#到代码树根目录的相对路径
WORKROOT('../../../../')

#C++编译参数.
CPPFLAGS('$(ENV_CXXFLAGS) -g -DNDEBUG -O2 -pipe -W -Wall -Werror -fPIC -fno-omit-frame-pointer -Wno-deprecated -Wno-unused-parameter')
#在目前的版本中，只要用到baidu-rpc的项目都强烈建议加下面一行,以避免在gcc4下的误优化
CPPFLAGS('-D__const__=')

#为了方便本例通过comake2 -UB下载依赖，我们直接import上层baidu-rpc的依赖，
#在你自己的项目中，你得把下面三行改成CONFIGS('public/baidu-rpc@ci-base')
INCPATHS('../../src/')
LIBS('../../output/lib/libbdrpc.a')
ImportConfigsFrom('../../')

#分别开启cpu profiler和heap profiler，后者要求使用tcmalloc
CPPFLAGS('-DBAIDU_RPC_ENABLE_CPU_PROFILER -DBAIDU_RPC_ENABLE_HEAP_PROFILER')
CONFIGS('third-64/tcmalloc@1.7.0.200',Libraries('lib/libtcmalloc_and_profiler.a'))

#链接参数.
LDFLAGS('-lpthread -lrt -lssl -lcrypto -ldl -lz')

#这是支持.proto作为源文件必须的
PROTOC(ENV.WorkRoot()+"/third-64/protobuf/bin/protoc")
PROTOFLAGS("--plugin=protoc-gen-mcpack=" + ENV.WorkRoot() + "/public/mcpack2pb/protoc-gen-mcpack --mcpack_out=.")
PROTOFLAGS('--proto_path=' + ENV.WorkRoot() + '/public/mcpack2pb/')
PROTOFLAGS('--proto_path=' + ENV.WorkRoot() + '/public/baidu-rpc/protocol')
PROTOFLAGS('--proto_path=' + ENV.WorkRoot() + '/third-64/protobuf/include/')

#可执行文件
Application('echo_client', Sources('echo.proto client.cpp'))
Application('echo_server', Sources('echo.proto server.cpp'))
